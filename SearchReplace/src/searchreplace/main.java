/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package searchreplace;

import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author sebas
 */
public class main extends javax.swing.JFrame {

    DefaultListModel dlm = new DefaultListModel();
    DefaultComboBoxModel fileModel = new DefaultComboBoxModel();
    DefaultComboBoxModel searchModel = new DefaultComboBoxModel();
    DefaultComboBoxModel replaceModel = new DefaultComboBoxModel();
    DefaultListModel resultModel = new DefaultListModel();
    
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        
        lstRawFile.setModel(dlm);
        cbFilePath.setModel(fileModel);
        cbSearch.setModel(searchModel);
        cbReplace.setModel(replaceModel);
        lstResult.setModel(resultModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jComboBox1 = new javax.swing.JComboBox<>();
        butgrSearch = new javax.swing.ButtonGroup();
        butgrReplace = new javax.swing.ButtonGroup();
        panFile = new javax.swing.JPanel();
        lFile = new javax.swing.JLabel();
        cbFilePath = new javax.swing.JComboBox<>();
        butOpen = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRawFile = new javax.swing.JList<>();
        panSearch = new javax.swing.JPanel();
        lSearch = new javax.swing.JLabel();
        cbSearch = new javax.swing.JComboBox<>();
        cbCasesenitivity = new javax.swing.JCheckBox();
        cbFullWord = new javax.swing.JCheckBox();
        cbShowIndex = new javax.swing.JCheckBox();
        butSearch = new javax.swing.JButton();
        panLine = new javax.swing.JPanel();
        rbWholeLine = new javax.swing.JRadioButton();
        rbStartOfLine = new javax.swing.JRadioButton();
        rbAnywhereInLine = new javax.swing.JRadioButton();
        panReplace = new javax.swing.JPanel();
        lReplace = new javax.swing.JLabel();
        cbReplace = new javax.swing.JComboBox<>();
        panLineR = new javax.swing.JPanel();
        rbSelectedLine = new javax.swing.JRadioButton();
        rbEveryLine = new javax.swing.JRadioButton();
        cbAllInLine = new javax.swing.JCheckBox();
        butReplace = new javax.swing.JButton();
        panResult = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstResult = new javax.swing.JList<>();
        lResult = new javax.swing.JLabel();
        cbWritting = new javax.swing.JCheckBox();
        butSave = new javax.swing.JButton();
        butBut = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        sOpen = new javax.swing.JPopupMenu.Separator();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        sQuit = new javax.swing.JPopupMenu.Separator();
        miQuit = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();
        miSearch = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        mIntel = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 713));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {300};
        layout.rowHeights = new int[] {200};
        layout.columnWeights = new double[] {100.0};
        layout.rowWeights = new double[] {100.0};
        getContentPane().setLayout(layout);

        panFile.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panFile.setMinimumSize(new java.awt.Dimension(300, 150));
        panFile.setPreferredSize(new java.awt.Dimension(700, 250));

        lFile.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lFile.setText("Datei:");
        lFile.setRequestFocusEnabled(false);

        cbFilePath.setEditable(true);
        cbFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilePathActionPerformed(evt);
            }
        });

        butOpen.setText("...");
        butOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstRawFile);

        javax.swing.GroupLayout panFileLayout = new javax.swing.GroupLayout(panFile);
        panFile.setLayout(panFileLayout);
        panFileLayout.setHorizontalGroup(
            panFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(panFileLayout.createSequentialGroup()
                        .addComponent(lFile)
                        .addGap(18, 18, 18)
                        .addComponent(cbFilePath, 0, 648, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(butOpen)))
                .addContainerGap())
        );
        panFileLayout.setVerticalGroup(
            panFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lFile)
                    .addComponent(cbFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butOpen))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        lFile.getAccessibleContext().setAccessibleDescription("");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panFile, gridBagConstraints);

        panSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panSearch.setMinimumSize(new java.awt.Dimension(0, 130));
        panSearch.setPreferredSize(new java.awt.Dimension(600, 140));

        lSearch.setText("<html> Suchen <br> nach: </html>");

        cbSearch.setEditable(true);
        cbSearch.setMinimumSize(new java.awt.Dimension(200, 22));
        cbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSearchActionPerformed(evt);
            }
        });

        cbCasesenitivity.setText("Groß/Kleinschreibung berücksichtigen");

        cbFullWord.setText("nur ganzes Wort suchen");

        cbShowIndex.setText("Zeilennummer anzeigen");

        butSearch.setText("Suchen");
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });

        panLine.setBorder(javax.swing.BorderFactory.createTitledBorder("wo in der Zeile"));

        butgrSearch.add(rbWholeLine);
        rbWholeLine.setText("ganze Zeile");

        butgrSearch.add(rbStartOfLine);
        rbStartOfLine.setText("Zeilenanfang");

        butgrSearch.add(rbAnywhereInLine);
        rbAnywhereInLine.setSelected(true);
        rbAnywhereInLine.setText("irgendwo in der Zeile");

        javax.swing.GroupLayout panLineLayout = new javax.swing.GroupLayout(panLine);
        panLine.setLayout(panLineLayout);
        panLineLayout.setHorizontalGroup(
            panLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panLineLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbWholeLine, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbStartOfLine, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbAnywhereInLine))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panLineLayout.setVerticalGroup(
            panLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panLineLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbWholeLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbStartOfLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbAnywhereInLine)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panSearchLayout = new javax.swing.GroupLayout(panSearch);
        panSearch.setLayout(panSearchLayout);
        panSearchLayout.setHorizontalGroup(
            panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panSearchLayout.createSequentialGroup()
                        .addGroup(panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFullWord, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCasesenitivity, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panSearchLayout.createSequentialGroup()
                        .addComponent(cbShowIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                        .addComponent(butSearch)))
                .addGap(18, 18, 18)
                .addComponent(panLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panSearchLayout.setVerticalGroup(
            panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panSearchLayout.createSequentialGroup()
                        .addGroup(panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panSearchLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbCasesenitivity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbFullWord)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbShowIndex))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panSearchLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(butSearch))))
                    .addComponent(panLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panSearch, gridBagConstraints);

        panReplace.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panReplace.setMinimumSize(new java.awt.Dimension(0, 100));
        panReplace.setPreferredSize(new java.awt.Dimension(700, 110));

        lReplace.setText("<html> Ersetzen <br> durch: </html>");
        lReplace.setVerifyInputWhenFocusTarget(false);
        lReplace.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        cbReplace.setEditable(true);
        cbReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbReplaceActionPerformed(evt);
            }
        });

        panLineR.setBorder(javax.swing.BorderFactory.createTitledBorder("wo in der Zeile"));

        butgrReplace.add(rbSelectedLine);
        rbSelectedLine.setSelected(true);
        rbSelectedLine.setText("in den markierten Zeilen");

        butgrReplace.add(rbEveryLine);
        rbEveryLine.setText("in allen Zeilen");

        javax.swing.GroupLayout panLineRLayout = new javax.swing.GroupLayout(panLineR);
        panLineR.setLayout(panLineRLayout);
        panLineRLayout.setHorizontalGroup(
            panLineRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panLineRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panLineRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panLineRLayout.createSequentialGroup()
                        .addComponent(rbEveryLine, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(rbSelectedLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panLineRLayout.setVerticalGroup(
            panLineRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panLineRLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbSelectedLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbEveryLine)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbAllInLine.setText("alle in der Zeile");

        butReplace.setText("Ersetzen");
        butReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butReplaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panReplaceLayout = new javax.swing.GroupLayout(panReplace);
        panReplace.setLayout(panReplaceLayout);
        panReplaceLayout.setHorizontalGroup(
            panReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panReplaceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panReplaceLayout.createSequentialGroup()
                        .addComponent(cbAllInLine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, Short.MAX_VALUE)
                        .addComponent(butReplace))
                    .addComponent(cbReplace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(panLineR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panReplaceLayout.setVerticalGroup(
            panReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panReplaceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panLineR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panReplaceLayout.createSequentialGroup()
                        .addGroup(panReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panReplaceLayout.createSequentialGroup()
                                .addComponent(cbAllInLine)
                                .addGap(14, 14, 14))
                            .addComponent(butReplace, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panReplace, gridBagConstraints);

        panResult.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane2.setViewportView(lstResult);

        lResult.setText("Resultat:");

        cbWritting.setText("Proportionalschrift");
        cbWritting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbWrittingActionPerformed(evt);
            }
        });

        butSave.setText("Speichern unter ...");
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        butBut.setText("Beenden");
        butBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panResultLayout = new javax.swing.GroupLayout(panResult);
        panResult.setLayout(panResultLayout);
        panResultLayout.setHorizontalGroup(
            panResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panResultLayout.createSequentialGroup()
                .addGroup(panResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panResultLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(panResultLayout.createSequentialGroup()
                                .addComponent(lResult)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panResultLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(cbWritting)
                        .addGap(190, 190, 190)
                        .addComponent(butSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(butBut)))
                .addContainerGap())
        );
        panResultLayout.setVerticalGroup(
            panResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lResult)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbWritting)
                    .addComponent(butSave)
                    .addComponent(butBut))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(panResult, gridBagConstraints);

        mFile.setText("Datei");
        mFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miNew.setText("Neu");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        mFile.add(miNew);
        mFile.add(sOpen);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miOpen.setText("Öffnen");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        mFile.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSave.setText("Speichern unter");
        mFile.add(miSave);
        mFile.add(sQuit);

        miQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        miQuit.setText("Beenden");
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butButActionPerformed(evt);
            }
        });
        mFile.add(miQuit);

        jMenuBar1.add(mFile);

        mEdit.setText("Bearbeiten");

        miSearch.setText("Suchen");
        miSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });
        mEdit.add(miSearch);

        jMenuItem1.setText("Ersetzen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butReplaceActionPerformed(evt);
            }
        });
        mEdit.add(jMenuItem1);

        jMenuBar1.add(mEdit);

        mIntel.setText("Info");

        miAbout.setText("Über ...");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        mIntel.add(miAbout);

        jMenuBar1.add(mIntel);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_miNewActionPerformed

    private void cbFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilePathActionPerformed
        // TODO add your handling code here:
        boolean exists = false;
        for (int i = 0; i < fileModel.getSize(); ++i) {
            if (fileModel.getElementAt(i).equals(cbFilePath.getSelectedItem()))
                exists = true;
        }
        if (!exists)
            fileModel.addElement(cbFilePath.getSelectedItem());
        
        
        try {
            BufferedReader br = new BufferedReader(new FileReader(cbFilePath.getSelectedItem().toString()));

            dlm.clear();
            resultModel.clear();

            String line;
            while ((line = br.readLine()) != null) {
                dlm.addElement(line);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbFilePathActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        
        fc.setFileFilter(new FileFilter(){
            @Override
            public boolean accept(File file) {
                return file.getName().endsWith(".txt") || file.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Text-File";
            }
            
        });
        
        if (fc.showDialog(this, "Jürgen") == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(fc.getSelectedFile().getAbsolutePath()));
                
                dlm.clear();
                resultModel.clear();
                
                String line;
                while ((line = br.readLine()) != null) {
                    dlm.addElement(line);
                }
                
                br.close();
                
                boolean exists = false;
                for (int i = 0; i < fileModel.getSize(); ++i) {
                    if (fileModel.getElementAt(i).equals(fc.getSelectedFile().getAbsolutePath()))
                        exists = true;
                }
                if (!exists)
                    fileModel.addElement(fc.getSelectedFile().getAbsolutePath());
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miOpenActionPerformed
    
    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        // TODO add your handling code here:
        resultModel.clear();
        
        String[] lines = new String[dlm.size()];
        String selected = searchModel.getSelectedItem().toString();
        
        for (int i = 0; i < dlm.size(); ++i)
            lines[i] = dlm.getElementAt(i).toString();
        
        if (!cbCasesenitivity.isSelected()) {
            selected = selected.toLowerCase();
            for (int i = 0; i < lines.length; ++i)
                lines[i] = lines[i].toLowerCase();
        }
                
        String[][] linesWord = null;
        if (cbFullWord.isSelected()) {
            linesWord = new String[lines.length][];
            for (int i = 0; i < linesWord.length; ++i)
                linesWord[i] = lines[i].split(" ");
        }
            
        if (rbAnywhereInLine.isSelected()) {
            if (linesWord == null) {
                for (int i = 0; i < lines.length; ++i)
                    if (lines[i].contains(selected))
                        resultModel.addElement(dlm.getElementAt(i));
            } else {
                for (int i = 0; i < linesWord.length; ++i)
                    for (int j = 0; j < linesWord[i].length; ++ j)
                        if (linesWord[i][j].equals(selected)) {
                            resultModel.addElement(dlm.getElementAt(i));
                            break;
                        }
            }
        } else if (rbStartOfLine.isSelected()) {
            if (linesWord == null) {
                for (int i = 0; i < lines.length; ++i)
                    if (lines[i].startsWith(selected))
                        resultModel.addElement(dlm.getElementAt(i));
            } else {
                for (int i = 0; i < linesWord.length; ++i)
                    if (linesWord[i][0].equals(selected))
                        resultModel.addElement(dlm.getElementAt(i));
            }
        } else if (rbWholeLine.isSelected()) {
            for (int i = 0; i < lines.length; ++i)
                if (lines[i].equals(selected))
                    resultModel.addElement(dlm.getElementAt(i));
        }
    }//GEN-LAST:event_butSearchActionPerformed

    private void cbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSearchActionPerformed
        // TODO add your handling code here:
        boolean exists = false;
        for (int i = 0; i < searchModel.getSize(); ++i) {
            if (searchModel.getElementAt(i).equals(cbSearch.getSelectedItem()))
                exists = true;
        }
        if (!exists)
            searchModel.addElement(cbSearch.getSelectedItem());
    }//GEN-LAST:event_cbSearchActionPerformed

    private void cbReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbReplaceActionPerformed
        // TODO add your handling code here:
        boolean exists = false;
        for (int i = 0; i < replaceModel.getSize(); ++i) {
            if (replaceModel.getElementAt(i).equals(cbReplace.getSelectedItem()))
                exists = true;
        }
        if (!exists)
            replaceModel.addElement(cbReplace.getSelectedItem());
    }//GEN-LAST:event_cbReplaceActionPerformed

    private void butReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butReplaceActionPerformed
        // TODO add your handling code here:
        if (rbSelectedLine.isSelected()) {
            int[] lines = lstResult.getSelectedIndices();
            if (cbAllInLine.isSelected()) {
                for (int i = 0; i < dlm.getSize(); ++i)
                    for (int j = 0; j < resultModel.getSize(); ++j)
                        for (int k = 0; k < lines.length; ++k)
                            if (resultModel.getElementAt(j).equals(dlm.getElementAt(i)) && i == lines[k]) {
                                dlm.setElementAt(replaceModel.getSelectedItem(), i);
                                resultModel.setElementAt(replaceModel.getSelectedItem(), j);
                            }
            } else {
                for (int i = 0; i < dlm.getSize(); ++i)
                    for (int j = 0; j < resultModel.getSize(); ++j)
                        for (int k = 0; k < lines.length; ++k)
                            if (resultModel.getElementAt(j).equals(dlm.getElementAt(i)) && i == lines[k]) {
                                //cbSearch.getSel
                                String[] parts = resultModel.getElementAt(j).toString().split(cbSearch.getSelectedItem().toString());
                                String replacement = "";
                                for (int l = 0; l < parts.length; ++l) {
                                    replacement += parts[l];
                                    replacement += ((l == parts.length - 1) ? "" : replaceModel.getSelectedItem());
                                }
                                System.out.println(replacement);
                                dlm.setElementAt(replacement, i);
                                resultModel.setElementAt(replacement, j);
                            }
            }
        } else {
            if (cbAllInLine.isSelected()) {
                for (int i = 0; i < dlm.getSize(); ++i)
                    for (int j = 0; j < resultModel.getSize(); ++j)
                        if (resultModel.getElementAt(j).equals(dlm.getElementAt(i))) {
                                dlm.setElementAt(replaceModel.getSelectedItem(), i);
                                resultModel.setElementAt(replaceModel.getSelectedItem(), j);
                            }
            } else {
                for (int i = 0; i < dlm.getSize(); ++i)
                    for (int j = 0; j < resultModel.getSize(); ++j)
                        if (resultModel.getElementAt(j).equals(dlm.getElementAt(i))) {
                                String[] parts = resultModel.getElementAt(j).toString().split(cbSearch.getSelectedItem().toString());
                                String replacement = "";
                                for (int l = 0; l < parts.length; ++l) {
                                    replacement += parts[l];
                                    replacement += ((l == parts.length - 1) ? "" : replaceModel.getSelectedItem());
                                }
                                dlm.setElementAt(replacement, i);
                                resultModel.setElementAt(replacement, j);
                            }
            }
        }
    }//GEN-LAST:event_butReplaceActionPerformed

    private void butButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butButActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_butButActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "<html>SearchReplace<br>Version 1.1.1</html>", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_miAboutActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if (resultModel.getSize() == 0) {
            return;
        }

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {
            @Override
            public String getDescription() {
                return "Text-Files";
            }

            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".txt");
            }

        });

        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedWriter br = new BufferedWriter(new FileWriter(fc.getSelectedFile()));

                for (int i = 0; i < resultModel.getSize(); i++) {
                    br.write(resultModel.getElementAt(i) + "\n");
                }

                br.close();
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_saveActionPerformed

    private void cbWrittingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbWrittingActionPerformed
        // TODO add your handling code here:
        if (cbWritting.isSelected()) {
            lstResult.setFont(new Font("Calibri", Font.PLAIN, 10));
        } else {
            lstResult.setFont(new Font("Arial", Font.PLAIN, 10));
        }
    }//GEN-LAST:event_cbWrittingActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBut;
    private javax.swing.JButton butOpen;
    private javax.swing.JButton butReplace;
    private javax.swing.JButton butSave;
    private javax.swing.JButton butSearch;
    private javax.swing.ButtonGroup butgrReplace;
    private javax.swing.ButtonGroup butgrSearch;
    private javax.swing.JCheckBox cbAllInLine;
    private javax.swing.JCheckBox cbCasesenitivity;
    private javax.swing.JComboBox<String> cbFilePath;
    private javax.swing.JCheckBox cbFullWord;
    private javax.swing.JComboBox<String> cbReplace;
    private javax.swing.JComboBox<String> cbSearch;
    private javax.swing.JCheckBox cbShowIndex;
    private javax.swing.JCheckBox cbWritting;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lFile;
    private javax.swing.JLabel lReplace;
    private javax.swing.JLabel lResult;
    private javax.swing.JLabel lSearch;
    private javax.swing.JList<String> lstRawFile;
    private javax.swing.JList<String> lstResult;
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenu mIntel;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSearch;
    private javax.swing.JPanel panFile;
    private javax.swing.JPanel panLine;
    private javax.swing.JPanel panLineR;
    private javax.swing.JPanel panReplace;
    private javax.swing.JPanel panResult;
    private javax.swing.JPanel panSearch;
    private javax.swing.JRadioButton rbAnywhereInLine;
    private javax.swing.JRadioButton rbEveryLine;
    private javax.swing.JRadioButton rbSelectedLine;
    private javax.swing.JRadioButton rbStartOfLine;
    private javax.swing.JRadioButton rbWholeLine;
    private javax.swing.JPopupMenu.Separator sOpen;
    private javax.swing.JPopupMenu.Separator sQuit;
    // End of variables declaration//GEN-END:variables
}
